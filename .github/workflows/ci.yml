
name: CI tests

on:
  push:
    branches: [main]
  pull_request:
    branches: ["*"]

jobs:

  frontend-setup:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache frontend node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-frontend-node-modules
        with:
          path: ~/frontend/node_modules/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend build
      - name: Save frontend build folder
        uses: actions/upload-artifact@v1
        with:
          name: frontend-build-folder
          path: frontend/build/

  frontend-lint:
    needs: frontend-setup
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache frontend node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-frontend-node-modules
        with:
          path: ~/frontend/node_modules/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend lint

  python-setup:
    runs-on: ubuntu-20.04
    
    strategy:
      matrix:
        python-version: ['3.9']
    
    name: python ${{ matrix.python-version }} setup
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - uses: Gr1N/setup-poetry@v7
      - name: python cache
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: .venv/
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - run: pip install --upgrade wheel
      - run: cat pyproject.toml
      - run: cat poetry.lock
      - run: poetry install
      - run: poetry show -t

  python-unittests:
    needs: python-setup
    runs-on: ubuntu-20.04

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: mysecretpassword
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 6379 on service container to the host
          - 6379:6379

    strategy:
      matrix:
        python-version: ['3.9']
    
    name: python ${{ matrix.python-version }} unittest
    
    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: Gr1N/setup-poetry@v7
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: .venv/
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      
      - run: poetry install
      - run: poetry run python -m pytest
      - run: poetry run python -m coverage report --fail-under=100

  poetry-checks:
    needs: python-setup
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: ['3.9']
        poetry-command:
          - poetry check

    name: poetry - ${{ matrix.poetry-command }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: Gr1N/setup-poetry@v7
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: .venv/
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - run: poetry install
      - run: poetry show -t
      - run: ${{ matrix.poetry-command }}

  python-lint:
    needs: python-setup
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: ['3.9']
        lint-command:
          - poetry run python -m black --check backend/
          - poetry run python -m isort --check-only --diff backend/
          - poetry run python -m unify --check-only --recursive --quote \" backend/
          - poetry run python -m pylint backend/

    name: python ${{ matrix.python-version }} lint - ${{ matrix.lint-command }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: Gr1N/setup-poetry@v7
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: .venv/
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - run: poetry install
      - run: ${{ matrix.lint-command }}

  docker-setup:
    needs: frontend-setup
    runs-on: ubuntu-20.04

    name: docker setup

    steps:
      - uses: actions/checkout@v2
      - name: Download frontend build
        uses: actions/download-artifact@v2
        with:
          name: frontend-build-folder
          path: frontend/build/
      - run: docker-compose pull
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - run: docker-compose build

  system-tests:
    needs: docker-setup
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: docker-compose pull
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - run: chmod +x backend/config/start.sh  # Fix for "/bin/sh: 1: /home/user/config/start.sh: Permission denied"
      - run: mkdir tests/screens/
      - run: yarn --cwd tests install
      - run: yarn --cwd tests ci
      
      - name: Docker Compose Check
        # If any previous command fails, run 'docker-compose up' to check for errors
        if: ${{ failure() }}
        timeout-minutes: 1
        run: docker-compose up

      - name: Save error screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: ci-tests-screenshots
          path: tests/screens/
